import cv2
import threading
import time

class VideoCaptureThread:
    def __init__(self, stream_url, timeout=5):
        self.stream_url = stream_url
        self.timeout = timeout
        self.cap = cv2.VideoCapture(self.stream_url)
        self.frame = None
        self.ret = None
        self.running = True
        self.lock = threading.Lock()
        self.thread = threading.Thread(target=self.update, daemon=True)
        self.thread.start()

    def update(self):
        while self.running:
            if self.cap.isOpened():
                ret, frame = self.cap.read()
                if ret:
                    self.ret = ret
                    with self.lock:
                        self.frame = frame
                else:
                    print("Frame read failed. Attempting reconnect...")
                    self.reconnect()
            time.sleep(0.01)  # Small delay to prevent 100% CPU usage

    def get_fps(self):
        fps = self.cap.get(cv2.CAP_PROP_FPS)
        return fps if fps > 0 else 30  # Default to 30 FPS if unknown

    def read(self):
        with self.lock:
            #time.sleep(1/60)
            return self.ret, self.frame
        
    def set(self, kw, val):
        self.cap.set(kw, val)
        
    def get(self, kw):
        self.cap.get(kw)

    def isOpened(self):
        return self.cap.isOpened()

    def reconnect(self):
        self.cap.release()
        time.sleep(2)  # Wait before reconnecting
        self.cap = cv2.VideoCapture(self.stream_url)

    def stop(self):
        self.running = False
        self.thread.join()
        self.cap.release()